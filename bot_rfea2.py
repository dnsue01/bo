from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import time
import asyncio

# Configura el token de tu bot de Telegram
TOKEN = "7941997835:AAGFA-bMzJjQbgRFzFh9KpLpJgqfw3K4S38"

# Configura el servicio de ChromeDriver
CHROME_DRIVER_PATH = "./chromedriver.exe"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã ¬°Hola! Env√≠ame tu correo y contrase√±a con este formato:\n"
        "`correo:tu_correo@example.com contrase√±a:tu_contrase√±a` üèÉ",
        parse_mode="Markdown"
    )

async def handle_credentials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    if "correo:" in user_message and "contrase√±a:" in user_message:
        loading_message = await update.message.reply_text("‚öôÔ∏è Prepar√°ndote para el calentamiento... ¬°Aguarda un momento! ‚è≥")
        try:
            correo = user_message.split("correo:")[1].split("contrase√±a:")[0].strip()
            contrase√±a = user_message.split("contrase√±a:")[1].strip()

            context.user_data["correo"] = correo
            context.user_data["contrase√±a"] = contrase√±a

            service = Service(CHROME_DRIVER_PATH)
            driver = webdriver.Chrome(service=service)
            driver.get("https://atletismorfea.es/user/login-registro")
            time.sleep(3)

            try:
                accept_cookies_button = driver.find_element(By.ID, "CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll")
                accept_cookies_button.click()
            except:
                pass

            driver.find_element(By.ID, "edit-email").send_keys(correo)
            driver.find_element(By.ID, "edit-password").send_keys(contrase√±a)
            driver.find_element(By.ID, "edit-submit").click()
            time.sleep(5)

            try:
                driver.find_element(By.XPATH, '//div[contains(@class, "alert-danger") and contains(@role, "alert")]')
                await context.bot.delete_message(chat_id=update.message.chat_id, message_id=loading_message.message_id)
                await update.message.reply_text("‚ùå Credenciales incorrectas. Por favor, int√©ntalo de nuevo enviando tus datos.")
                driver.quit()
                return
            except:
                pass

            driver.maximize_window()
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, '//a[text()="Mis inscripciones"]'))
            ).click()
            time.sleep(5)

            context.user_data["driver"] = driver
            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=loading_message.message_id)
            await update.message.reply_text("‚úÖ Sesi√≥n iniciada con √©xito. ¬°Bienvenido a la pista! üèüÔ∏è")
            await mostrar_menu(update)
        except:
            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=loading_message.message_id)
            await update.message.reply_text("‚ö†Ô∏è Ocurri√≥ un problema. Por favor, int√©ntalo de nuevo m√°s tarde.")
    else:
        await update.message.reply_text(
            "‚ùó El formato es incorrecto. Por favor, env√≠amelo como:\n"
            "`correo:tu_correo@example.com contrase√±a:tu_contrase√±a` üì©",
            parse_mode="Markdown"
        )

def get_main_menu_markup():
    keyboard = [
        [InlineKeyboardButton("1Ô∏è‚É£ Inscribirse üìù", callback_data="inscribirse")],
        [InlineKeyboardButton("2Ô∏è‚É£ Ver inscripciones üëÄ", callback_data="ver_inscripciones")],
        [InlineKeyboardButton("‚ùå Salir", callback_data="salir")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def mostrar_menu(update: Update):
    reply_markup = get_main_menu_markup()
    await update.message.reply_text("‚ö° Elige tu pr√≥ximo paso en la pista:", reply_markup=reply_markup)

def procesar_inscripciones(driver):
    inscripciones = []
    try:
        table = driver.find_element(By.CLASS_NAME, "tabla_inscripciones")
        rows = table.find_elements(By.TAG_NAME, "tr")
        for row in rows[1:]:
            columns = row.find_elements(By.TAG_NAME, "td")
            delete_link = None
            try:
                delete_link = columns[-1].find_element(By.TAG_NAME, "a").get_attribute("href")
            except:
                pass
            if delete_link and "/user/inscription/delete/" in delete_link:
                inscription_id = delete_link.split("/")[-2]
                inscripciones.append({
                    'fecha': columns[0].text,
                    'competicion': columns[1].text,
                    'prueba': columns[2].text,
                    'id': inscription_id,
                    'delete_link': delete_link
                })
    except Exception as e:
        print(f"Error procesando inscripciones: {e}")
    return inscripciones

async def dar_baja_inscripcion(driver, inscripcion_id, confirmar=True):
  
    try:
        # Hacer clic en el bot√≥n de eliminar correspondiente a la inscripci√≥n
        delete_button = driver.find_element(By.XPATH, f'//a[contains(@href, "/user/inscription/delete/{inscripcion_id}/")]')
        delete_button.click()

        # Esperar a que aparezca el di√°logo de confirmaci√≥n
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "ui-dialog"))
        )

        # Elegir entre Confirmar o Cancelar
        if confirmar:
            # Clic en el bot√≥n de confirmar
            confirm_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, '//button[contains(@class, "button--primary")]'))
            )
            confirm_button.click()
        else:
            # Clic en el bot√≥n de cancelar
            cancel_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, '//button[contains(@class, "dialog-cancel")]'))
            )
            cancel_button.click()

        # Esperar un momento para asegurarse de que la acci√≥n se complete
        time.sleep(2)
        return True
    except Exception as e:
        print(f"Error procesando el di√°logo de confirmaci√≥n: {e}")
        return False


async def mostrar_inscripciones(update: Update, context: ContextTypes.DEFAULT_TYPE):
    driver = context.user_data.get("driver")
    inscripciones = procesar_inscripciones(driver)
    if not inscripciones:
        await update.callback_query.message.reply_text("üìù No tienes inscripciones activas.")
        return
    keyboard = []
    for i, insc in enumerate(inscripciones, 1):
        text = f"{i}. üìÖ {insc['fecha']} - üèÜ {insc['competicion']} ({insc['prueba']})"
        keyboard.append([InlineKeyboardButton(text, callback_data=f"ver_inscripcion-{insc['id']}")])
        keyboard.append([InlineKeyboardButton(f"‚ùå Dar de baja inscripci√≥n {i}", callback_data=f"baja-{insc['id']}")])
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è Volver al men√∫ principal", callback_data="menu_principal")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(
        "üìã Tus inscripciones actuales:\nSelecciona una inscripci√≥n para ver m√°s detalles o darla de baja:",
        reply_markup=reply_markup
    )

async def handle_option(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    driver = context.user_data.get("driver")

    if query.data == "ver_inscripciones":
        await query.edit_message_text("üîç Consultando tus inscripciones... ¬°Un momento! ‚è≥")
        await mostrar_inscripciones(update, context)

    elif query.data.startswith("baja-"):
        inscripcion_id = query.data.split("-")[1]
        await query.edit_message_text("‚è≥ Procesando la baja de tu inscripci√≥n...")
        reply_markup = await dar_baja_inscripcion(driver, inscripcion_id)
        if reply_markup:
            await query.message.reply_text(
                "‚ö†Ô∏è ¬øEst√°s seguro de que quieres darte de baja de esta inscripci√≥n?",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("‚ùå No se pudo abrir el di√°logo de confirmaci√≥n. Intenta m√°s tarde.")

    elif query.data.startswith("confirmar_baja-"):
        inscripcion_id = query.data.split("-")[1]
        await query.edit_message_text("‚è≥ Procesando la baja...")

        if await dar_baja_inscripcion(driver, inscripcion_id, confirmar=True):
            await query.message.reply_text("‚úÖ Te has dado de baja correctamente de la inscripci√≥n.")
        else:
            await query.message.reply_text("‚ùå No se pudo procesar la baja. Por favor, intenta m√°s tarde.")
        await mostrar_inscripciones(update, context)

    elif query.data == "cancelar_baja":
        inscripcion_id = query.data.split("-")[1]
        await query.edit_message_text("‚è≥ Cancelando la operaci√≥n...")

        if await dar_baja_inscripcion(driver, inscripcion_id, confirmar=False):
            await query.message.reply_text("‚ùå Operaci√≥n cancelada correctamente.")
        else:
            await query.message.reply_text("‚ö†Ô∏è No se pudo cancelar la operaci√≥n. Intenta m√°s tarde.")
        await mostrar_inscripciones(update, context)

    elif query.data == "menu_principal":
        reply_markup = get_main_menu_markup()
        await query.message.reply_text("‚ö° Elige tu pr√≥ximo paso en la pista:", reply_markup=reply_markup)


def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_credentials))
    application.add_handler(CallbackQueryHandler(handle_option))
    application.run_polling()

if __name__ == "__main__":
    main()
